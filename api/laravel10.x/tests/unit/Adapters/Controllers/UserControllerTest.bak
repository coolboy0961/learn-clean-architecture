<?php

namespace Tests\Unit\Http\Controllers;

use App\Domain\Entities\User;
use App\Applications\UseCases\CreateUserUseCase;
use App\Applications\UseCases\GetAllUsersUseCase;
use App\Http\Controllers\UserController;
use App\Http\Requests\CreateUserRequest;
use App\Http\Responses\UserResponse;
use Tests\TestCase;
use Mockery;

// Dependenvy Injectionを使わず、Controllerのコンストラクタで直接usecaseをnewする場合のテスト
// をここにバックアップしておく。Mock方法は割と難しいため。
class UserControllerTest extends TestCase
{
    public function tearDown(): void
    {
        Mockery::close();
        parent::tearDown();
    }

    public function test_Requestのユーザ情報を受け取って正しくCreateUseCaseに渡せること()
    {
        // Arrange
        $expectedUser = new User('John Doe', 'john@example.com');
        $expectedResponse = new UserResponse($expectedUser);
        $useCaseMock = Mockery::mock('overload:' . CreateUserUseCase::class);
        $useCaseMock->shouldReceive('execute')
            ->withArgs(function (User $user) {
                return $user->getName() === 'John Doe' && $user->getEmail() === 'john@example.com';
            })
            ->once()
            ->andReturn(new User('John Doe', 'john@example.com'));

        // Act
        $request = new CreateUserRequest();
        $request->merge([
            'name' => 'John Doe',
            'email' => 'john@example.com',
        ]);
        $controller = new UserController();
        $actualResponse = $controller->create($request);

        // Assert
        $this->assertEquals($actualResponse, $expectedResponse);
    }

    public function test_GetAllUsersUseCaseから取得したユーザ情報を正しくResponseの形で返却できること()
    {
        // Arrange
        $users = [
            new User('John Doe', 'john@example.com'),
            new User('Jane Doe', 'jane@example.com'),
        ];

        $useCase = $this->createMock(GetAllUsersUseCase::class);
        $useCase->expects($this->once())
            ->method('execute')
            ->willReturn($users);

        // Act
        $controller = new UserController(new CreateUserUseCase(), $useCase);
        $responses = $controller->index();

        // Assert
        $this->assertCount(2, $responses);

        $this->assertSame('John Doe', $responses[0]->toArray()['name']);
        $this->assertSame('john@example.com', $responses[0]->toArray()['email']);

        $this->assertSame('Jane Doe', $responses[1]->toArray()['name']);
        $this->assertSame('jane@example.com', $responses[1]->toArray()['email']);
    }
}
